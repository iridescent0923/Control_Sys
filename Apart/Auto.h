///////////////////////////////////////////////////////////////////////////////
// Auto.h
#pragma once

#include "ApartInterfaces.h"

class CAuto 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
///</AutoGeneratedContent>
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_ApartCAuto)
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	CAuto();
	virtual	~CAuto();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

///</AutoGeneratedContent>

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();

	// Tracing
	CTcTrace m_Trace;

///<AutoGeneratedContent id="Members">
	TcTraceLevel m_TraceLevelMax;
	AutoParameter m_Parameter;
	AutoInputs m_Inputs;
	AutoOutputs m_Outputs;
	AutoEncoder m_Encoder;
	AutoControl m_Control;
	AutoTrajecory m_Trajecory;
	AutoSafe m_Safe;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
///</AutoGeneratedContent>

	// TODO: Custom variable
	UINT m_counter;

	double t, w, Kp, Ki, Kd;

	
	void CAuto::init(void);
	void CAuto::readEnc(void);
	void CAuto::PID_Control(void);

};
